{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Serverless URL Shortener Guide","text":"<p>This is a step by step guide to build serverless URL shortner using  AWS free tier . It uses:</p> <ul> <li>AWS Lambda for handling the logic</li> <li>API Gateway for routing HTTP requests</li> <li>DynamoDB for storing URL mappings</li> <li>Serverless Framework for deployment purpose</li> </ul> <p>The overview of interconnection of each  service works is given below.</p> <ol> <li>User sends a POST request with a long URL.</li> <li>API Gateway receives the request and sends it to a Lambda function.</li> <li>The Lambda function:</li> <li>Generates a unique short code.</li> <li>Saves the short code and original URL to DynamoDB.</li> <li>When someone accesses the short link (<code>GET /{shortCode}</code>), another Lambda function:</li> <li>Looks up the code in DynamoDB.</li> <li>Redirects the user to the original long URL.</li> </ol> <p>The goal is to shorten URLs efficiently without the need to manage servers.</p> <p>Explore the documentation using the navigation on the left.</p>"},{"location":"api/","title":"API Guide (How it works)","text":"<p>This app has two main functions:</p> <ol> <li>Make a short URL from a long one</li> <li>Open the short URL and go to the original long one</li> </ol>"},{"location":"api/#1-post-shorten","title":"1. POST /shorten","text":"<p>What it does: This lets you turn a long website link (URL) into a short one.</p> <p>How to use it: - You send a POST request to <code>/shorten</code> - You must include your long URL like this:</p> <pre><code>{\n  \"longUrl\": \"https://example.com\"\n}\n</code></pre> <ol> <li>GET /shortCode</li> </ol> <p>When someone opens the short link (for example: https://yourdomain.com/abc123), it will automatically open the original long link.</p> <p>Users don\u2019t have to send anything. Just click or type the short link in your browser and it will take you to the full website.</p> <p>What you get back:</p> <p>A new short link, like </p> <pre><code>{\n  \"shortUrl\": \"https://yourdomain.com/abc123\"\n}\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#flow-overview","title":"Flow Overview","text":"<ol> <li>User sends a POST request to shorten a long URL.</li> <li></li> <li>API Gateway receives the request and sends it to a Lambda function.</li> <li></li> <li>Lambda generates a short code and stores it in DynamoDB with the original URL.</li> <li></li> <li>GET request to the short URL triggers another Lambda function.</li> <li></li> <li>Lambda looks up the code in DynamoDB and redirects the user to the original long URL.</li> </ol>"},{"location":"features/","title":"Features","text":"<p>It shorten any long URL using a unique short code  </p> <p>It automatically redirects users from the short URL to the long one </p> <p>It is built using 100% serverless architecture (no servers to manage)  </p> <p>It is Scalable and cost-effective  </p> <p>Easily deployable using the Serverless Framework  </p>"},{"location":"features/#endpoints","title":"Endpoints","text":""},{"location":"features/#post-shorten","title":"<code>POST /shorten</code>","text":"<ul> <li>Request Body:   <code>json   {     \"longUrl\": \"https://example.com\"   }</code></li> </ul>"},{"location":"features/#response","title":"Response:","text":"<pre><code>{\n  \"shortUrl\": \"https://yourdomain.com/abc123\"\n}\n</code></pre>"},{"location":"technologies/","title":"Technologies Used","text":""},{"location":"technologies/#technologies-used_1","title":"Technologies Used","text":"<p>This project uses several Amazon Web Services (AWS) and developer tools to build a serverless and scalable URL shortener. Here's a breakdown of each technology used, what it does, and why it's important.</p>"},{"location":"technologies/#aws-lambda","title":"AWS Lambda","text":"<p>What is it? AWS Lambda is a serverless computing service from Amazon. It runs your code only when needed, without requiring you to manage or provision any servers.</p> <p>What it does in this project: - When a user submits a long URL, a Lambda function is triggered to generate a short code and save it in the database. - When a user clicks a short URL, another Lambda function is triggered to fetch the original URL and redirect the user.</p> <p>Why it's useful: - No server management: You only write your code; AWS handles the rest. - Cost-efficient: You pay only for the time your function runs. - Scalable: Automatically handles more traffic when needed.</p>"},{"location":"technologies/#amazon-api-gateway","title":"Amazon API Gateway","text":"<p>What is it? API Gateway is a fully managed service that makes it easy to create, publish, maintain, and monitor APIs (Application Programming Interfaces).</p> <p>What it does in this project: - Acts as the entry point to the application. - Receives HTTP requests (<code>POST</code> to shorten URLs and <code>GET</code> to retrieve them) and passes them to the correct Lambda function.</p> <p>Why it's useful: - Security &amp; control: You can manage who accesses your APIs. - Scalable: Automatically handles many incoming requests at once. - Flexible routing: You can map different routes like <code>/shorten</code> or <code>/{shortCode}</code> to different Lambda functions.</p>"},{"location":"technologies/#amazon-dynamodb","title":"Amazon DynamoDB","text":"<p>What is it? DynamoDB is Amazon\u2019s fast and flexible NoSQL database service and is designed for high-performance applications.</p> <p>What it does in this project: - Stores the mapping between short codes and long URLs. - When someone enters a short code, the app looks it up in DynamoDB to find the matching original URL.</p> <p>Why it's useful: - High performance: Quickly reads/writes data even massive amount of data and leads to high performance. - Serverless: With serverless architecture,there is no need to manage database servers.This saves time and money. - Highly available: Your data is always accessible.</p>"},{"location":"technologies/#serverless-framework","title":"Serverless Framework","text":"<p>What is it? The Serverless Framework is an open-source tool that helps you build and deploy serverless applications easily using Infrastructure as Code (IaC).</p> <p>What it does in this project: - Manages the deployment of Lambda, API Gateway, and DynamoDB using one simple configuration file (<code>serverless.yml</code>). - Automates the creation of AWS resources with a single command (<code>sls deploy</code>).</p> <p>Why it's useful: - Simple deployments: Deploy everything with one command. - Reusable code: Write configuration once and use it across environments. - Faster development: Focus on your application, not the infrastructure.</p>"},{"location":"technologies/#http-methods-get-post","title":"HTTP Methods: GET &amp; POST","text":"<p>What are they? They are types of requests sent from a client (like your browser or an app) to the server.</p> <p>POST: Post request is used when you send data to the app (e.g., a long URL to be shortened).  GET: Get request is used when you request data (e.g., getting a short URL ).</p> <p>Why they're important: These methods are how users interact with your API. In this project: - A <code>POST</code> request is used to create a short link. - A <code>GET</code> request is used to open the short link and redirect the user.</p>"},{"location":"technologies/#yaml-serverlessyml","title":"YAML (<code>serverless.yml</code>)","text":"<p>What is it? YAML (Yet Another Markup Language) is a format used to write configuration files in a human-readable way.</p> <p>What it does in this project: The <code>serverless.yml</code> file defines: - What functions to deploy for the particular service. - Which routes to expose (like <code>/shorten</code>) - What permissions and resources (like DynamoDB tables) your app needs</p> <p>Why it's useful: - Makes deployments predictable - Easy to understand and edit - Keeps all setup in one place</p>"},{"location":"technologies/#python","title":"Python","text":"<p>What is it? Python is a popular programming language known for its simplicity and readability.It is widely used for automation function etc</p> <p>What it does in this project: - The logic to shorten and expand URLs is written in Python (<code>handler.py</code> and <code>redirect.py</code>).</p> <p>Why it's useful: - Easy to learn and write - Lots of libraries and support - Supported by AWS Lambda</p>"}]}